ext {
    versions = [
            koin: "1.0.0"
    ]
}

def keystoreProperties = new Properties()
try {
    def keystorePropertiesFile = rootProject.file("signing.properties")
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} catch (FileNotFoundException ignored) {
    println 'signing.properties file was not found, no release builds will be available'
    // Put dummy values so that the debug builds work
    keystoreProperties['storeFile'] = rootProject.file('build.gradle') // bogus file, I know
    keystoreProperties['keyAlias'] = ''
    keystoreProperties['storePassword'] = ''
}

apply from: 'versioning.gradle'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdk 34

    buildFeatures {
        viewBinding=true
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE.txt', 'META-INF/NOTICE.txt']
        }
    }
    defaultConfig {
        applicationId "io.github.benoitduffez.cupsprint"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode buildVersionCode()
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    namespace 'io.github.benoitduffez.cupsprint'
}

dependencies {
    implementation 'javax.jmdns:jmdns:3.4.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'junit:junit:4.13.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.22"
    implementation 'com.jakewharton.timber:timber:4.7.1'
    // Koin DI
    implementation "io.insert-koin:koin-android:3.5.3"
}

apply plugin: 'jacoco'
tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn['testDebugUnitTest', 'createDebugCoverageReport']
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}